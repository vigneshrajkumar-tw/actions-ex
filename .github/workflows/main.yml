# Controls when the workflow will run
name: Main Workflow
on:
  push:
    branches:
    - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


env:
  docker_username: ${{ github.actor }} 
  docker_password: ${{ secrets.GITHUB_TOKEN }}
  GIT_COMMIT: ${{ github.sha }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  my_job:
    name: build
    # runtime on which the job will be run
    runs-on: ubuntu-22.04 
    container: gradle:6-jdk11
    
    steps:
      - name: Clone
        uses: actions/checkout@v4  
        with:
          fetch-depth: 0 # needed for super-lint
      
      # - name: Lint
      #   uses: super-linter/super-linter/slim@v6.3.0
      #   env:
      #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Test
        run: ci/unit-test-app.sh

      - name: Build
        run: ci/build-app.sh
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with: 
          name: application
          path: .
      
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: application
          path: .
    
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: app
          push: true
          tags: ghcr.io/${{ github.actor }}/micronaut-app:1.0-${{ github.sha }},ghcr.io/${{ github.actor }}/micronaut-app:latest
        
      

# TODO::
# Build and test: Clones down and run the gradle build command found in ci/build-app.sh, and thereafter runs the gradle test command found in ci/unit-test-app.sh
# Build docker: runs both building of the docker image, and pushes it up to the hub
# Component test: runs a docker-compose file with a python test to test the application.
# Performance test: runs a docker-compose file with a k6 performance tester to test the application.
